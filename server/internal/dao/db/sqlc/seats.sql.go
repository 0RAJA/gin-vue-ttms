// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: seats.sql

package db

import (
	"context"
)

const createSeat = `-- name: CreateSeat :exec
insert into ttms.public."seats"
    (cinema_id, row, col)
values ($1, $2, $3)
`

type CreateSeatParams struct {
	Cinemaid int64 `json:"cinemaid"`
	Row      int16 `json:"row"`
	Col      int16 `json:"col"`
}

func (q *Queries) CreateSeat(ctx context.Context, arg *CreateSeatParams) error {
	_, err := q.db.Exec(ctx, createSeat, arg.Cinemaid, arg.Row, arg.Col)
	return err
}

type CreateSeatsParams struct {
	CinemaID int64 `json:"cinema_id"`
	Row      int16 `json:"row"`
	Col      int16 `json:"col"`
}

const deleteSeat = `-- name: DeleteSeat :exec
delete
from ttms.public."seats"
where cinema_id = $1
  and col = $2
  and row = $3
`

type DeleteSeatParams struct {
	Cinemaid int64 `json:"cinemaid"`
	Col      int16 `json:"col"`
	Row      int16 `json:"row"`
}

func (q *Queries) DeleteSeat(ctx context.Context, arg *DeleteSeatParams) error {
	_, err := q.db.Exec(ctx, deleteSeat, arg.Cinemaid, arg.Col, arg.Row)
	return err
}

const deleteSeatsByPlan = `-- name: DeleteSeatsByPlan :exec
delete
from ttms.public."seats"
where cinema_id = $1
`

func (q *Queries) DeleteSeatsByPlan(ctx context.Context, cinemaid int64) error {
	_, err := q.db.Exec(ctx, deleteSeatsByPlan, cinemaid)
	return err
}

const getOne = `-- name: GetOne :one
select id, cinema_id, row, col, status
from ttms.public."seats"
where row = $1
  and col = $2
`

type GetOneParams struct {
	Row int16 `json:"row"`
	Col int16 `json:"col"`
}

type GetOneRow struct {
	ID       int64       `json:"id"`
	CinemaID int64       `json:"cinema_id"`
	Row      int16       `json:"row"`
	Col      int16       `json:"col"`
	Status   Seatsstatus `json:"status"`
}

func (q *Queries) GetOne(ctx context.Context, arg *GetOneParams) (*GetOneRow, error) {
	row := q.db.QueryRow(ctx, getOne, arg.Row, arg.Col)
	var i GetOneRow
	err := row.Scan(
		&i.ID,
		&i.CinemaID,
		&i.Row,
		&i.Col,
		&i.Status,
	)
	return &i, err
}

const getSeatsByCinemas = `-- name: GetSeatsByCinemas :many
select id, cinema_id, row, col, status
from ttms.public."seats"
where cinema_id = $1
`

type GetSeatsByCinemasRow struct {
	ID       int64       `json:"id"`
	CinemaID int64       `json:"cinema_id"`
	Row      int16       `json:"row"`
	Col      int16       `json:"col"`
	Status   Seatsstatus `json:"status"`
}

func (q *Queries) GetSeatsByCinemas(ctx context.Context, cinemaID int64) ([]*GetSeatsByCinemasRow, error) {
	rows, err := q.db.Query(ctx, getSeatsByCinemas, cinemaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetSeatsByCinemasRow{}
	for rows.Next() {
		var i GetSeatsByCinemasRow
		if err := rows.Scan(
			&i.ID,
			&i.CinemaID,
			&i.Row,
			&i.Col,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSeatsById = `-- name: GetSeatsById :one
select id, cinema_id, row, col, status from
ttms.public."seats"
where id = $1
`

type GetSeatsByIdRow struct {
	ID       int64       `json:"id"`
	CinemaID int64       `json:"cinema_id"`
	Row      int16       `json:"row"`
	Col      int16       `json:"col"`
	Status   Seatsstatus `json:"status"`
}

func (q *Queries) GetSeatsById(ctx context.Context, id int64) (*GetSeatsByIdRow, error) {
	row := q.db.QueryRow(ctx, getSeatsById, id)
	var i GetSeatsByIdRow
	err := row.Scan(
		&i.ID,
		&i.CinemaID,
		&i.Row,
		&i.Col,
		&i.Status,
	)
	return &i, err
}

const updateSeats = `-- name: UpdateSeats :exec
update ttms.public."seats"
set status = $1
where cinema_id = $2
  and row = $3
  and col = $4
`

type UpdateSeatsParams struct {
	Status   Seatsstatus `json:"status"`
	Cinemaid int64       `json:"cinemaid"`
	Row      int16       `json:"row"`
	Col      int16       `json:"col"`
}

func (q *Queries) UpdateSeats(ctx context.Context, arg *UpdateSeatsParams) error {
	_, err := q.db.Exec(ctx, updateSeats,
		arg.Status,
		arg.Cinemaid,
		arg.Row,
		arg.Col,
	)
	return err
}

const updateSeatsById = `-- name: UpdateSeatsById :exec
update ttms.public."seats"
set status = $1
where id = $2
`

type UpdateSeatsByIdParams struct {
	Status Seatsstatus `json:"status"`
	ID     int64       `json:"id"`
}

func (q *Queries) UpdateSeatsById(ctx context.Context, arg *UpdateSeatsByIdParams) error {
	_, err := q.db.Exec(ctx, updateSeatsById, arg.Status, arg.ID)
	return err
}
