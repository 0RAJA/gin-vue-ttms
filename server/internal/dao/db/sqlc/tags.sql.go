// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: tags.sql

package db

import (
	"context"
)

type CreateTagParams struct {
	MovieID int64  `json:"movie_id"`
	TagName string `json:"tag_name"`
}

const deleteByMovieId = `-- name: DeleteByMovieId :exec
delete from ttms.public."tags"
where movie_id = $1::bigint
`

func (q *Queries) DeleteByMovieId(ctx context.Context, movieID int64) error {
	_, err := q.db.Exec(ctx, deleteByMovieId, movieID)
	return err
}

const deleteByTagName = `-- name: DeleteByTagName :exec
delete from ttms.public."tags"
where tag_name = $1::varchar
`

func (q *Queries) DeleteByTagName(ctx context.Context, tagName string) error {
	_, err := q.db.Exec(ctx, deleteByTagName, tagName)
	return err
}

const deleteOneByMovieAndTag = `-- name: DeleteOneByMovieAndTag :exec
delete from ttms.public."tags"
where movie_id = $1::bigint
and tag_name = $2::varchar
`

type DeleteOneByMovieAndTagParams struct {
	MovieID int64  `json:"movie_id"`
	TagName string `json:"tag_name"`
}

func (q *Queries) DeleteOneByMovieAndTag(ctx context.Context, arg *DeleteOneByMovieAndTagParams) error {
	_, err := q.db.Exec(ctx, deleteOneByMovieAndTag, arg.MovieID, arg.TagName)
	return err
}

const getMovieInTag = `-- name: GetMovieInTag :many
select movie_id, tag_name from ttms.public."tags"
where tag_name = $1::varchar
`

type GetMovieInTagRow struct {
	MovieID int64  `json:"movie_id"`
	TagName string `json:"tag_name"`
}

func (q *Queries) GetMovieInTag(ctx context.Context, tagName string) ([]*GetMovieInTagRow, error) {
	rows, err := q.db.Query(ctx, getMovieInTag, tagName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetMovieInTagRow{}
	for rows.Next() {
		var i GetMovieInTagRow
		if err := rows.Scan(&i.MovieID, &i.TagName); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTags = `-- name: GetTags :many
select distinct tags.tag_name from ttms.public."tags"
`

func (q *Queries) GetTags(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var tag_name string
		if err := rows.Scan(&tag_name); err != nil {
			return nil, err
		}
		items = append(items, tag_name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsInMovie = `-- name: GetTagsInMovie :many
select tag_name from ttms.public."tags"
where movie_id = $1::bigint
`

func (q *Queries) GetTagsInMovie(ctx context.Context, movieid int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getTagsInMovie, movieid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var tag_name string
		if err := rows.Scan(&tag_name); err != nil {
			return nil, err
		}
		items = append(items, tag_name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovieTag = `-- name: UpdateMovieTag :exec
update ttms.public."tags"
set
tag_name = $1::varchar
where movie_id = $2::bigint
and $3::varchar = tag_name
`

type UpdateMovieTagParams struct {
	Newtagname string `json:"newtagname"`
	MovieID    int64  `json:"movie_id"`
	Oldtagname string `json:"oldtagname"`
}

func (q *Queries) UpdateMovieTag(ctx context.Context, arg *UpdateMovieTagParams) error {
	_, err := q.db.Exec(ctx, updateMovieTag, arg.Newtagname, arg.MovieID, arg.Oldtagname)
	return err
}
