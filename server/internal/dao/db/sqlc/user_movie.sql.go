// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user_movie.sql

package db

import (
	"context"
)

const createUserMovie = `-- name: CreateUserMovie :exec
insert into user_movie (user_id, movie_id)
VALUES ($1, $2)
`

type CreateUserMovieParams struct {
	UserID  int64 `json:"user_id"`
	MovieID int64 `json:"movie_id"`
}

func (q *Queries) CreateUserMovie(ctx context.Context, arg *CreateUserMovieParams) error {
	_, err := q.db.Exec(ctx, createUserMovie, arg.UserID, arg.MovieID)
	return err
}

const deleteUserMovie = `-- name: DeleteUserMovie :exec
delete
from user_movie
where user_id = $1
  and movie_id = $2
`

type DeleteUserMovieParams struct {
	UserID  int64 `json:"user_id"`
	MovieID int64 `json:"movie_id"`
}

func (q *Queries) DeleteUserMovie(ctx context.Context, arg *DeleteUserMovieParams) error {
	_, err := q.db.Exec(ctx, deleteUserMovie, arg.UserID, arg.MovieID)
	return err
}

const existUserMovie = `-- name: ExistUserMovie :one
select exists(
               select 1
               from user_movie
               where user_id = $1
                 and movie_id = $2
           )
`

type ExistUserMovieParams struct {
	UserID  int64 `json:"user_id"`
	MovieID int64 `json:"movie_id"`
}

func (q *Queries) ExistUserMovie(ctx context.Context, arg *ExistUserMovieParams) (bool, error) {
	row := q.db.QueryRow(ctx, existUserMovie, arg.UserID, arg.MovieID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
