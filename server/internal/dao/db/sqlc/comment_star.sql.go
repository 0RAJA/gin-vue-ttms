// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: comment_star.sql

package db

import (
	"context"
)

const createCommentStar = `-- name: CreateCommentStar :exec
insert into comment_star (user_id, comment_id)
values ($1, $2)
`

type CreateCommentStarParams struct {
	UserID    int64 `json:"user_id"`
	CommentID int64 `json:"comment_id"`
}

func (q *Queries) CreateCommentStar(ctx context.Context, arg *CreateCommentStarParams) error {
	_, err := q.db.Exec(ctx, createCommentStar, arg.UserID, arg.CommentID)
	return err
}

const deleteCommentStar = `-- name: DeleteCommentStar :exec
delete
from comment_star
where user_id = $1
  and comment_id = $2
`

type DeleteCommentStarParams struct {
	UserID    int64 `json:"user_id"`
	CommentID int64 `json:"comment_id"`
}

func (q *Queries) DeleteCommentStar(ctx context.Context, arg *DeleteCommentStarParams) error {
	_, err := q.db.Exec(ctx, deleteCommentStar, arg.UserID, arg.CommentID)
	return err
}

const getCommentStar = `-- name: GetCommentStar :one
select user_id, comment_id
from comment_star
where user_id = $1
  and comment_id = $2
limit 1
`

type GetCommentStarParams struct {
	UserID    int64 `json:"user_id"`
	CommentID int64 `json:"comment_id"`
}

func (q *Queries) GetCommentStar(ctx context.Context, arg *GetCommentStarParams) (*CommentStar, error) {
	row := q.db.QueryRow(ctx, getCommentStar, arg.UserID, arg.CommentID)
	var i CommentStar
	err := row.Scan(&i.UserID, &i.CommentID)
	return &i, err
}
