// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0

package db

import (
	"database/sql"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type Gender string

const (
	GenderValue0 Gender = "男"
	GenderValue1 Gender = "女"
	GenderValue2 Gender = "未知"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type Lifestate string

const (
	LifestateValue0 Lifestate = "单身"
	LifestateValue1 Lifestate = "热恋"
	LifestateValue2 Lifestate = "已婚"
	LifestateValue3 Lifestate = "为人父母"
	LifestateValue4 Lifestate = "未知"
)

func (e *Lifestate) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Lifestate(s)
	case string:
		*e = Lifestate(s)
	default:
		return fmt.Errorf("unsupported scan type for Lifestate: %T", src)
	}
	return nil
}

type Method string

const (
	MethodPOST   Method = "POST"
	MethodGET    Method = "GET"
	MethodPUT    Method = "PUT"
	MethodDELETE Method = "DELETE"
)

func (e *Method) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Method(s)
	case string:
		*e = Method(s)
	default:
		return fmt.Errorf("unsupported scan type for Method: %T", src)
	}
	return nil
}

type Orderby string

const (
	OrderbyVisitCount Orderby = "visit_count"
	OrderbyScore      Orderby = "score"
	OrderbyPeriod     Orderby = "period"
)

func (e *Orderby) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Orderby(s)
	case string:
		*e = Orderby(s)
	default:
		return fmt.Errorf("unsupported scan type for Orderby: %T", src)
	}
	return nil
}

type Orderstatus string

const (
	OrderstatusValue0 Orderstatus = "待支付"
	OrderstatusValue1 Orderstatus = "已支付"
)

func (e *Orderstatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Orderstatus(s)
	case string:
		*e = Orderstatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Orderstatus: %T", src)
	}
	return nil
}

type Privilege string

const (
	PrivilegeBAN    Privilege = "BAN"
	PrivilegeValue1 Privilege = "管理员"
	PrivilegeValue2 Privilege = "用户"
)

func (e *Privilege) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Privilege(s)
	case string:
		*e = Privilege(s)
	default:
		return fmt.Errorf("unsupported scan type for Privilege: %T", src)
	}
	return nil
}

type Seatsstatus string

const (
	SeatsstatusValue0 Seatsstatus = "正常"
	SeatsstatusValue1 Seatsstatus = "损坏"
	SeatsstatusValue2 Seatsstatus = "走廊"
)

func (e *Seatsstatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Seatsstatus(s)
	case string:
		*e = Seatsstatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Seatsstatus: %T", src)
	}
	return nil
}

type Ticketstatus string

const (
	TicketstatusValue0 Ticketstatus = "正常"
	TicketstatusValue1 Ticketstatus = "锁定"
	TicketstatusValue2 Ticketstatus = "已售"
)

func (e *Ticketstatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Ticketstatus(s)
	case string:
		*e = Ticketstatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Ticketstatus: %T", src)
	}
	return nil
}

type Cinema struct {
	ID     int64  `json:"id"`
	Name   string `json:"name"`
	Avatar string `json:"avatar"`
	Rows   int16  `json:"rows"`
	Cols   int16  `json:"cols"`
}

type Comment struct {
	ID        int64     `json:"id"`
	Content   string    `json:"content"`
	MovieID   int64     `json:"movie_id"`
	UserID    int64     `json:"user_id"`
	Score     float32   `json:"score"`
	IpAddress string    `json:"ip_address"`
	CreatedAt time.Time `json:"created_at"`
}

type CommentStar struct {
	UserID    int64 `json:"user_id"`
	CommentID int64 `json:"comment_id"`
}

type Movie struct {
	ID                  int64       `json:"id"`
	Actors              []string    `json:"actors"`
	Name                string      `json:"name"`
	AliasName           string      `json:"alias_name"`
	Content             string      `json:"content"`
	Avatar              string      `json:"avatar"`
	VisitCount          int64       `json:"visit_count"`
	BoxOffice           float32     `json:"box_office"`
	Duration            int16       `json:"duration"`
	Period              time.Time   `json:"period"`
	Score               float32     `json:"score"`
	Area                string      `json:"area"`
	NameContentAliasTsv interface{} `json:"name_content_alias_tsv"`
	Director            string      `json:"director"`
}

type Order struct {
	UserID      int64       `json:"user_id"`
	PlanID      int64       `json:"plan_id"`
	SeatsID     string      `json:"seats_id"`
	OrderID     uuid.UUID   `json:"order_id"`
	MovieName   string      `json:"movie_name"`
	MovieAvatar string      `json:"movie_avatar"`
	CinemaName  string      `json:"cinema_name"`
	CreateAt    time.Time   `json:"create_at"`
	Seats       string      `json:"seats"`
	Price       float32     `json:"price"`
	Status      Orderstatus `json:"status"`
}

type Plan struct {
	ID       int64     `json:"id"`
	MovieID  int64     `json:"movie_id"`
	CinemaID int64     `json:"cinema_id"`
	Version  string    `json:"version"`
	StartAt  time.Time `json:"start_at"`
	EndAt    time.Time `json:"end_at"`
	Price    float32   `json:"price"`
}

type Seat struct {
	ID       int64       `json:"id"`
	CinemaID int64       `json:"cinema_id"`
	Row      int16       `json:"row"`
	Col      int16       `json:"col"`
	Status   Seatsstatus `json:"status"`
}

type Tag struct {
	MovieID int64  `json:"movie_id"`
	TagName string `json:"tag_name"`
}

type Ticket struct {
	UserID   int64        `json:"user_id"`
	PlanID   int64        `json:"plan_id"`
	SeatsID  int64        `json:"seats_id"`
	Price    float32      `json:"price"`
	Status   Ticketstatus `json:"status"`
	LockTime time.Time    `json:"lock_time"`
}

type User struct {
	ID        int64          `json:"id"`
	Username  string         `json:"username"`
	Password  string         `json:"password"`
	Avatar    string         `json:"avatar"`
	Lifestate Lifestate      `json:"lifestate"`
	Hobby     sql.NullString `json:"hobby"`
	Email     string         `json:"email"`
	Birthday  time.Time      `json:"birthday"`
	Gender    Gender         `json:"gender"`
	Signature string         `json:"signature"`
	Privilege Privilege      `json:"privilege"`
}

type UserMovie struct {
	UserID  int64 `json:"user_id"`
	MovieID int64 `json:"movie_id"`
}

type VisitCount struct {
	CreateDate time.Time `json:"create_date"`
	VisitCount int64     `json:"visit_count"`
}
