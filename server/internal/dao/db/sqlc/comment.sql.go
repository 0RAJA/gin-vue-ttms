// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: comment.sql

package db

import (
	"context"
	"time"
)

const createComment = `-- name: CreateComment :one
insert into comment (content, movie_id, user_id, score, ip_address)
values ($1, $2, $3, $4, $5)
returning id, content, movie_id, user_id, score, ip_address, created_at
`

type CreateCommentParams struct {
	Content   string  `json:"content"`
	MovieID   int64   `json:"movie_id"`
	UserID    int64   `json:"user_id"`
	Score     float32 `json:"score"`
	IpAddress string  `json:"ip_address"`
}

func (q *Queries) CreateComment(ctx context.Context, arg *CreateCommentParams) (*Comment, error) {
	row := q.db.QueryRow(ctx, createComment,
		arg.Content,
		arg.MovieID,
		arg.UserID,
		arg.Score,
		arg.IpAddress,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.MovieID,
		&i.UserID,
		&i.Score,
		&i.IpAddress,
		&i.CreatedAt,
	)
	return &i, err
}

const deleteCommentByID = `-- name: DeleteCommentByID :exec
delete
from comment
where id = $1
`

func (q *Queries) DeleteCommentByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCommentByID, id)
	return err
}

const existComment = `-- name: ExistComment :one
select exists(
               select 1
               from comment
               where user_id = $1
                 and movie_id = $2
           )
`

type ExistCommentParams struct {
	UserID  int64 `json:"user_id"`
	MovieID int64 `json:"movie_id"`
}

func (q *Queries) ExistComment(ctx context.Context, arg *ExistCommentParams) (bool, error) {
	row := q.db.QueryRow(ctx, existComment, arg.UserID, arg.MovieID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getCommentByID = `-- name: GetCommentByID :one
select comment.id                                                                     as commentID,
       content,
       score,
       (select count(*) from comment_star where comment_star.comment_id = comment.id) as star_num,
       ip_address,
       created_at,
       "user".id                                                                      as userID,
       "user".username,
       "user".avatar
from comment,
     "user"
where comment.id = $1
  and "user".id = comment.user_id
limit 1
`

type GetCommentByIDRow struct {
	Commentid int64     `json:"commentid"`
	Content   string    `json:"content"`
	Score     float32   `json:"score"`
	StarNum   int64     `json:"star_num"`
	IpAddress string    `json:"ip_address"`
	CreatedAt time.Time `json:"created_at"`
	Userid    int64     `json:"userid"`
	Username  string    `json:"username"`
	Avatar    string    `json:"avatar"`
}

func (q *Queries) GetCommentByID(ctx context.Context, id int64) (*GetCommentByIDRow, error) {
	row := q.db.QueryRow(ctx, getCommentByID, id)
	var i GetCommentByIDRow
	err := row.Scan(
		&i.Commentid,
		&i.Content,
		&i.Score,
		&i.StarNum,
		&i.IpAddress,
		&i.CreatedAt,
		&i.Userid,
		&i.Username,
		&i.Avatar,
	)
	return &i, err
}

const getCommentsByMovieID = `-- name: GetCommentsByMovieID :many
select comment.id                                                                     as commentID,
       content,
       score,
       (select count(*) from comment_star where comment_star.comment_id = comment.id) as star_num,
       ip_address,
       created_at,
       "user".id                                                                      as userID,
       "user".username,
       "user".avatar,
       count(*) over ()                                                               as total
from comment,
     "user"
where movie_id = $1
  and "user".id = comment.user_id
order by star_num desc, comment.id desc
limit $2 offset $3
`

type GetCommentsByMovieIDParams struct {
	MovieID int64 `json:"movie_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

type GetCommentsByMovieIDRow struct {
	Commentid int64     `json:"commentid"`
	Content   string    `json:"content"`
	Score     float32   `json:"score"`
	StarNum   int64     `json:"star_num"`
	IpAddress string    `json:"ip_address"`
	CreatedAt time.Time `json:"created_at"`
	Userid    int64     `json:"userid"`
	Username  string    `json:"username"`
	Avatar    string    `json:"avatar"`
	Total     int64     `json:"total"`
}

func (q *Queries) GetCommentsByMovieID(ctx context.Context, arg *GetCommentsByMovieIDParams) ([]*GetCommentsByMovieIDRow, error) {
	rows, err := q.db.Query(ctx, getCommentsByMovieID, arg.MovieID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetCommentsByMovieIDRow{}
	for rows.Next() {
		var i GetCommentsByMovieIDRow
		if err := rows.Scan(
			&i.Commentid,
			&i.Content,
			&i.Score,
			&i.StarNum,
			&i.IpAddress,
			&i.CreatedAt,
			&i.Userid,
			&i.Username,
			&i.Avatar,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsByUserID = `-- name: GetCommentsByUserID :many
select comment.id                                                                     as commentID,
       comment.content,
       comment.score,
       (select count(*) from comment_star where comment_star.comment_id = comment.id) as star_num,
       ip_address,
       created_at,
       movie_id,
       movie.name                                                                     as movieName,
       movie.avatar                                                                   as movieAvatar,
       count(*) over ()                                                               as total
from comment,
     movie
where comment.user_id = $1
  and movie_id = movie.id
order by created_at desc
limit $2 offset $3
`

type GetCommentsByUserIDParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetCommentsByUserIDRow struct {
	Commentid   int64     `json:"commentid"`
	Content     string    `json:"content"`
	Score       float32   `json:"score"`
	StarNum     int64     `json:"star_num"`
	IpAddress   string    `json:"ip_address"`
	CreatedAt   time.Time `json:"created_at"`
	MovieID     int64     `json:"movie_id"`
	Moviename   string    `json:"moviename"`
	Movieavatar string    `json:"movieavatar"`
	Total       int64     `json:"total"`
}

func (q *Queries) GetCommentsByUserID(ctx context.Context, arg *GetCommentsByUserIDParams) ([]*GetCommentsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getCommentsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetCommentsByUserIDRow{}
	for rows.Next() {
		var i GetCommentsByUserIDRow
		if err := rows.Scan(
			&i.Commentid,
			&i.Content,
			&i.Score,
			&i.StarNum,
			&i.IpAddress,
			&i.CreatedAt,
			&i.MovieID,
			&i.Moviename,
			&i.Movieavatar,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
